name: Content Quality Assurance

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  content-validation:
    name: Content Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Dependencies
      run: |
        npm install -g markdownlint-cli2
        npm install -g markdown-link-check
        npm install -g textlint
        npm install -g alex
        
    - name: Markdown Linting
      run: |
        echo "üîç Running Markdown Linting..."
        markdownlint-cli2 "**/*.md" "#node_modules" "#.git"
        
    - name: Link Validation
      run: |
        echo "üîó Checking Markdown Links..."
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | \
        xargs -I {} markdown-link-check {} --config .github/workflows/link-check-config.json || true
        
    - name: Spell Check
      run: |
        echo "üìù Running Spell Check..."
        # Install aspell for spell checking
        sudo apt-get update
        sudo apt-get install -y aspell aspell-en
        
        # Simple spell check on markdown files (skip code blocks)
        while IFS= read -r -d '' file; do
          echo "Checking spelling in: $file"
          # Extract text content, skip code blocks and check spelling
          sed '/```/,/```/d' "$file" | aspell list --lang=en | sort -u | head -10 || true
        done < <(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -print0)
        
        echo "‚úÖ Spell check completed"
        
    - name: Content Structure Validation
      run: |
        echo "üìã Validating Content Structure..."
        
        # Check for required files
        missing_files=0
        required_files=("README.md" "LICENSE" "CODE_OF_CONDUCT.md")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ Found: $file"
          else
            echo "‚ùå Missing: $file"
            missing_files=$((missing_files + 1))
          fi
        done
        
        if [ $missing_files -gt 0 ]; then
          echo "‚ùå $missing_files required file(s) missing"
          exit 1
        fi
        
        # Check for proper heading structure in markdown files
        echo "üèóÔ∏è Checking heading structure..."
        while IFS= read -r -d '' file; do
          echo "Checking headings in: $file"
          # Check if file starts with h1 heading
          if head -n 5 "$file" | grep -q "^# "; then
            echo "‚úÖ $file has proper h1 heading"
          else
            echo "‚ö†Ô∏è $file may be missing h1 heading"
          fi
        done < <(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -print0)
        
        echo "‚úÖ Content structure validation completed"
        
    - name: Training Content Validation
      run: |
        echo "üéì Validating Training Content Standards..."
        
        # Check for educational markers
        while IFS= read -r -d '' file; do
          echo "Validating training content in: $file"
          
          # Look for learning objectives, examples, exercises
          if grep -q -i "learning\|objective\|example\|exercise\|practice\|tutorial" "$file"; then
            echo "‚úÖ $file contains educational content markers"
          else
            echo "‚ÑπÔ∏è $file may not contain explicit learning markers"
          fi
        done < <(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -print0)
        
        echo "‚úÖ Training content validation completed"
        
    - name: Security Scan
      run: |
        echo "üîí Running Basic Security Scan..."
        
        # Check for potential security issues in content
        while IFS= read -r -d '' file; do
          # Check for exposed secrets patterns (basic check)
          if grep -i -E "(password|secret|key|token).*[:=].*[a-zA-Z0-9]{10,}" "$file"; then
            echo "‚ö†Ô∏è Potential secret found in: $file"
          fi
          
          # Check for suspicious URLs
          if grep -E "http://[^/]*\.(tk|ml|ga|cf)" "$file"; then
            echo "‚ö†Ô∏è Suspicious URL found in: $file"
          fi
        done < <(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -print0)
        
        echo "‚úÖ Security scan completed"
        
    - name: Generate Content Report
      if: always()
      run: |
        echo "üìä Generating Content Report..."
        
        echo "## üìã Repository Content Summary" > content-report.md
        echo "" >> content-report.md
        
        echo "### üìÅ File Count" >> content-report.md
        echo "- Markdown files: $(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)" >> content-report.md
        echo "- Total files: $(find . -type f -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)" >> content-report.md
        echo "" >> content-report.md
        
        echo "### üìù Content Analysis" >> content-report.md
        echo "- Total word count: $(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -exec wc -w {} + | tail -n 1 | awk '{print $1}')" >> content-report.md
        echo "- Average file size: $(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -exec wc -c {} + | tail -n 1 | awk '{print int($1/NR) " bytes"}')" >> content-report.md
        echo "" >> content-report.md
        
        echo "### üéì Training Content Features" >> content-report.md
        echo "- Files with learning objectives: $(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -exec grep -l -i "learning\|objective" {} \; | wc -l)" >> content-report.md
        echo "- Files with examples: $(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -exec grep -l -i "example" {} \; | wc -l)" >> content-report.md
        echo "- Files with exercises: $(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -exec grep -l -i "exercise\|practice" {} \; | wc -l)" >> content-report.md
        
        cat content-report.md
        
    - name: Upload Content Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: content-quality-report
        path: content-report.md
        retention-days: 30